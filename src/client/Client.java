package client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.text.JTextComponent;

import java.awt.Color;

/**
 *
 * @author Admin
 */
public class Client extends javax.swing.JFrame {

	private Thread thread;
	private BufferedWriter os;
	private BufferedReader is;
	private Socket socketOfClient;
	private List<String> onlineList;
	private int id;
	private String serverIP;


	/**
	 * Creates new form Client
	 */
	public Client() {
		initComponents(); // Must be called first
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		jTextArea1.setEditable(false);
		jTextArea2.setEditable(false);
		onlineList = new ArrayList<>();
		serverIP = JOptionPane.showInputDialog("Nhập IP của Server:");
		if (serverIP != null && !serverIP.trim().isEmpty()) {
			setUpSocket(serverIP);
		} else {
			JOptionPane.showMessageDialog(rootPane, "IP Server không hợp lệ");
			System.exit(1);
		}
		id = -1;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	 private void initComponents() {
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTextArea2.setBackground(new Color(255, 234, 244));
        jPanel2 = new javax.swing.JPanel();
        jPanel2.setBackground(new Color(255, 232, 243));
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton1.setIcon(null);
        JButton jButton2 = new javax.swing.JButton();
        jButton2.setIcon(null);
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox1.setBackground(new Color(238, 255, 255));
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();


        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Danh sách online", jPanel1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);
    
        jButton1.setText("Gửi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        JButton jButtonSendFile = new JButton("Send File");
        jButtonSendFile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendFile();
            }
        });
        

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Chọn người nhận");

		
	
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("{Người nhận}");
        
        JButton btnNewButton = new JButton("File");
        btnNewButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		  sendFile();
        	}
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addContainerGap()
        					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        						.addGroup(jPanel2Layout.createSequentialGroup()
        							.addComponent(jTextField1, 198, 198, 198)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
        						.addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        						.addComponent(jComboBox1, 0, 277, Short.MAX_VALUE)
        						.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addGap(105)
        					.addComponent(btnNewButton)))
        			.addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(21)
        			.addComponent(jLabel3)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 293, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jLabel2)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnNewButton)
        			.addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel2.setLayout(jPanel2Layout);

        jTabbedPane1.addTab("Nhắn tin", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	
	private void jButton1ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		String messageContent = jTextField1.getText();
		if (messageContent.isEmpty()) {
			JOptionPane.showMessageDialog(rootPane, "Bạn chưa nhập tin nhắn");
			return;
		}
		if (jComboBox1.getSelectedIndex() == 0) {
			try {
				write("send-to-global" + "," + messageContent + "," + this.id);
				jTextArea1.setText(jTextArea1.getText() + "Bạn: " + messageContent + "\n");
				jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
			} catch (IOException ex) {
				JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
			}
		} else {
			try {
				String[] partner = ((String) jComboBox1.getSelectedItem()).split(" ");
				write("send-to-person" + "," + messageContent + "," + this.id + "," + partner[1]);
				jTextArea1.setText(
						jTextArea1.getText() + "Bạn (tới Client " + partner[1] + "): " + messageContent + "\n");
				jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
			} catch (IOException ex) {
				JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
			}
		}
		jTextField1.setText("");
	}// GEN-LAST:event_jButton1ActionPerformed

	private void jComboBox1ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jComboBox1ActionPerformed
		if (jComboBox1.getSelectedIndex() == 0) {
			jLabel3.setText("Global");
		} else {
			jLabel3.setText("Đang nhắn với " + jComboBox1.getSelectedItem());
		}
	}// GEN-LAST:event_jComboBox1ActionPerformed

	private void setUpSocket(String serverIP) {
		try {
			thread = new Thread() {
				@Override
				public void run() {
					try {
						// Gửi yêu cầu kết nối tới Server.
						socketOfClient = new Socket(serverIP, 7777);
						System.out.println("Kết nối thành công!");
						os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));
						is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));
						String message;
						while (true) {
							message = is.readLine();
							if (message == null) {
								break;
							}
							String[] messageSplit = message.split(",");
							if (messageSplit[0].equals("get-id")) {
								setID(Integer.parseInt(messageSplit[1]));
								setIDTitle();
							}
							if (messageSplit[0].equals("update-online-list")) {
								onlineList = new ArrayList<>();
								String online = "";
								String[] onlineSplit = messageSplit[1].split("-");
								for (int i = 0; i < onlineSplit.length; i++) {
									onlineList.add(onlineSplit[i]);
									online += "Client " + onlineSplit[i] + " đang online\n";
								}
								jTextArea2.setText(online);
								updateCombobox();
							}
							if (messageSplit[0].equals("global-message")) {
								jTextArea1.setText(jTextArea1.getText() + messageSplit[1] + "\n");
								jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
							}
						}
					} catch (UnknownHostException e) {
						JOptionPane.showMessageDialog(rootPane, "Không thể kết nối đến server: " + e.getMessage());
					} catch (IOException e) {
						JOptionPane.showMessageDialog(rootPane, "Lỗi kết nối: " + e.getMessage());
					}
				}
			};
			thread.start();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(rootPane, "Lỗi: " + e.getMessage());
		}
	}

	private void updateCombobox() {
		jComboBox1.removeAllItems();
		jComboBox1.addItem("Gửi tất cả");
		String idString = "" + this.id;
		for (String e : onlineList) {
			if (!e.equals(idString)) {
				jComboBox1.addItem("Client " + e);
			}
		}
	}

	private void setIDTitle() {
		this.setTitle("Client " + this.id);
	}

	private void setID(int id) {
		this.id = id;
	}

	private void write(String message) throws IOException {
		os.write(message);
		os.newLine();
		os.flush();
	}

	public static void main(String args[]) {
		new Client();
	}
	private void sendFile() {
	    JFileChooser fileChooser = new JFileChooser();
	    int returnValue = fileChooser.showOpenDialog(this);
	    if (returnValue == JFileChooser.APPROVE_OPTION) {
	        File file = fileChooser.getSelectedFile();
	        String fileName = file.getName();
	        long fileSize = file.length();

	        try {
	            // Send file details to server
	            write("send-file," + fileName + "," + fileSize + "," + this.id);

	            // Send file data
	            try (FileInputStream fileInputStream = new FileInputStream(file)) {
	                byte[] buffer = new byte[4096];
	                int bytesRead;
	                OutputStream os = socketOfClient.getOutputStream();
	                while ((bytesRead = fileInputStream.read(buffer)) != -1) {
	                    os.write(buffer, 0, bytesRead);
	                }
	                os.flush();
	            }
	        } catch (IOException e) {
	            JOptionPane.showMessageDialog(rootPane, "Error sending file: " + e.getMessage());
	        }
	    }
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton jButton1;
	private JComboBox<String> jComboBox1;
	private JLabel jLabel1;
	private JLabel jLabel2;
	private JLabel jLabel3;
	private JPanel jPanel1;
	private JPanel jPanel2;
	private JPanel jPanel3;
	private JScrollPane jScrollPane1;
	private JScrollPane jScrollPane2;
	private JTabbedPane jTabbedPane1;
	private JTextArea jTextArea1;
	private JTextArea jTextArea2;
	private JTextField jTextField1;
}
